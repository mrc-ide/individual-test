// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// run_model
std::vector<size_t> run_model(size_t N, size_t I0, double dt, size_t end_time, double gamma, double R0);
RcppExport SEXP _individualtest_run_model(SEXP NSEXP, SEXP I0SEXP, SEXP dtSEXP, SEXP end_timeSEXP, SEXP gammaSEXP, SEXP R0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type N(NSEXP);
    Rcpp::traits::input_parameter< size_t >::type I0(I0SEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< size_t >::type end_time(end_timeSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type R0(R0SEXP);
    rcpp_result_gen = Rcpp::wrap(run_model(N, I0, dt, end_time, gamma, R0));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_individualtest_run_model", (DL_FUNC) &_individualtest_run_model, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_individualtest(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

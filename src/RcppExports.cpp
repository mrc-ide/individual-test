// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "individualtest_types.hpp"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// birth_process
Rcpp::XPtr<process_t> birth_process(Rcpp::XPtr<CategoricalVariable> variable, Rcpp::XPtr<TargetedEvent> event, const double birth_rate);
RcppExport SEXP _individualtest_birth_process(SEXP variableSEXP, SEXP eventSEXP, SEXP birth_rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CategoricalVariable> >::type variable(variableSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<TargetedEvent> >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const double >::type birth_rate(birth_rateSEXP);
    rcpp_result_gen = Rcpp::wrap(birth_process(variable, event, birth_rate));
    return rcpp_result_gen;
END_RCPP
}
// infection_process
Rcpp::XPtr<process_t> infection_process(Rcpp::XPtr<CategoricalVariable> variable, const double beta, const size_t N, const double dt);
RcppExport SEXP _individualtest_infection_process(SEXP variableSEXP, SEXP betaSEXP, SEXP NSEXP, SEXP dtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CategoricalVariable> >::type variable(variableSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const size_t >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double >::type dt(dtSEXP);
    rcpp_result_gen = Rcpp::wrap(infection_process(variable, beta, N, dt));
    return rcpp_result_gen;
END_RCPP
}
// recovery_process
Rcpp::XPtr<process_t> recovery_process(Rcpp::XPtr<CategoricalVariable> variable, Rcpp::XPtr<TargetedEvent> event, const double gamma, const double dt);
RcppExport SEXP _individualtest_recovery_process(SEXP variableSEXP, SEXP eventSEXP, SEXP gammaSEXP, SEXP dtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CategoricalVariable> >::type variable(variableSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<TargetedEvent> >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type dt(dtSEXP);
    rcpp_result_gen = Rcpp::wrap(recovery_process(variable, event, gamma, dt));
    return rcpp_result_gen;
END_RCPP
}
// death_process
Rcpp::XPtr<process_t> death_process(Rcpp::XPtr<CategoricalVariable> variable, Rcpp::XPtr<TargetedEvent> event, const double death_rate);
RcppExport SEXP _individualtest_death_process(SEXP variableSEXP, SEXP eventSEXP, SEXP death_rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<CategoricalVariable> >::type variable(variableSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<TargetedEvent> >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const double >::type death_rate(death_rateSEXP);
    rcpp_result_gen = Rcpp::wrap(death_process(variable, event, death_rate));
    return rcpp_result_gen;
END_RCPP
}
// run_model
std::vector<size_t> run_model(size_t N, size_t I0, double dt, size_t end_time, double gamma, double R0, double birth_rate, double death_rate);
RcppExport SEXP _individualtest_run_model(SEXP NSEXP, SEXP I0SEXP, SEXP dtSEXP, SEXP end_timeSEXP, SEXP gammaSEXP, SEXP R0SEXP, SEXP birth_rateSEXP, SEXP death_rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< size_t >::type N(NSEXP);
    Rcpp::traits::input_parameter< size_t >::type I0(I0SEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< size_t >::type end_time(end_timeSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type R0(R0SEXP);
    Rcpp::traits::input_parameter< double >::type birth_rate(birth_rateSEXP);
    Rcpp::traits::input_parameter< double >::type death_rate(death_rateSEXP);
    rcpp_result_gen = Rcpp::wrap(run_model(N, I0, dt, end_time, gamma, R0, birth_rate, death_rate));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_individualtest_birth_process", (DL_FUNC) &_individualtest_birth_process, 3},
    {"_individualtest_infection_process", (DL_FUNC) &_individualtest_infection_process, 4},
    {"_individualtest_recovery_process", (DL_FUNC) &_individualtest_recovery_process, 4},
    {"_individualtest_death_process", (DL_FUNC) &_individualtest_death_process, 3},
    {"_individualtest_run_model", (DL_FUNC) &_individualtest_run_model, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_individualtest(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
